@model IEnumerable<Lab1.Models.Review>
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@using Lab1.Models;

@{
    ViewData["Title"] = "Index";
}

<h1> @ViewBag.ProductName Reviews</h1>

@if (User.Identity.IsAuthenticated && @ViewBag.Count == 0)
{
    var roles = ((ClaimsIdentity)User.Identity).Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value);

    if (roles.Contains("admin") || roles.Contains("creator") || roles.Contains("moderator") || roles.Contains("user"))
    {
        <p>
            @Html.ActionLink("Create new", "Create", new { productId = @ViewBag.ProductId, userId = @ViewBag.UserId, userName = @ViewBag.UserName, num = @ViewBag.Num, searchString = @ViewBag.SearchString })
        </p>
    }
}

@if (ViewBag.Num == 0)
{
    <p>
        @Html.ActionLink("Back to list", "Index", "Products", new { id = @ViewBag.SubcategoryId, name = @ViewBag.SubcategoryName, num = @ViewBag.Num, searchString = @ViewBag.SearchString })
    </p>
}
else
{
    <p>
        @Html.ActionLink("Back to list", "Index1", "Products", new { num = @ViewBag.Num, searchString = @ViewBag.SearchString })
    </p>
}

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Info)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Rating)
            </th>
            <th>User Name</th>
            <th>
                @Html.DisplayNameFor(model => model.Product)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Info)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Date)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Rating)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.Name)
                </td>
                <td>
                    @if (User.Identity.IsAuthenticated)
                    {

                        var roles = ((ClaimsIdentity)User.Identity).Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value);

                        if (!roles.Contains("creator") && !roles.Contains("moderator") && !roles.Contains("admin") && roles.Contains("user"))
                        {
                            if (item.UserId == @ViewBag.UserId)
                            {
                                <p>
                                    @Html.ActionLink("Edit", "Edit", new { id = @item.Id, productId = @item.ProductId, userId = @item.UserId, userName = @item.UserName, num = @ViewBag.Num, searchString = @ViewBag.SearchString }) |
                                    <a asp-action="Delete" asp-route-id="@item.Id" asp-route-num="@ViewBag.Num" asp-route-searchString="@ViewBag.SearchString">Delete</a>
                                </p>
                            }
                        }
                        else
                        {
                            if (roles.Contains("creator"))
                            {
                                if (item.UserId == @ViewBag.UserId)
                                {
                                    @Html.ActionLink("Edit", "Edit", new { id = @item.Id, productId = @item.ProductId, userId = @item.UserId, userName = @item.UserName, num = @ViewBag.Num, searchString = @ViewBag.SearchString })
                                }
                                <a asp-action="Delete" asp-route-id="@item.Id" asp-route-num="@ViewBag.Num" asp-route-searchString="@ViewBag.SearchString">Delete</a>
                            }
                            if (!roles.Contains("creator") && roles.Contains("admin"))
                            {
                                var rolesArray = getRoles(item.UserId);
                                if (item.UserId != @ViewBag.UserId)
                                {
                                    if (!rolesArray.Result.Contains("creator") && !rolesArray.Result.Contains("admin"))
                                    {
                                        <a asp-action="Delete" asp-route-id="@item.Id" asp-route-num="@ViewBag.Num" asp-route-searchString="@ViewBag.SearchString">Delete</a>
                                    }
                                }
                                else
                                {
                                    @Html.ActionLink("Edit", "Edit", new { id = @item.Id, productId = @item.ProductId, userId = @item.UserId, userName = @item.UserName, num = @ViewBag.Num, searchString = @ViewBag.SearchString })
                                    <a asp-action="Delete" asp-route-id="@item.Id" asp-route-num="@ViewBag.Num" asp-route-searchString="@ViewBag.SearchString">Delete</a>
                                }
                            }
                            if (!roles.Contains("creator") && !roles.Contains("admin") && roles.Contains("moderator"))
                            {
                                var rolesArray = getRoles(item.UserId);

                                if (item.UserId != @ViewBag.UserId)
                                {
                                    if (!rolesArray.Result.Contains("creator") && !rolesArray.Result.Contains("admin") && !rolesArray.Result.Contains("moderator"))
                                    {
                                        <a asp-action="Delete" asp-route-id="@item.Id" asp-route-num="@ViewBag.Num" asp-route-searchString="@ViewBag.SearchString">Delete</a>
                                    }
                                }
                                else
                                {
                                    @Html.ActionLink("Edit", "Edit", new { id = @item.Id, productId = @item.ProductId, userId = @item.UserId, userName = @item.UserName, num = @ViewBag.Num, searchString = @ViewBag.SearchString })
                                    <a asp-action="Delete" asp-route-id="@item.Id" asp-route-num="@ViewBag.Num" asp-route-searchString="@ViewBag.SearchString">Delete</a>
                                }
                            }

                        }
                    }


                </td>
            </tr>
        }
    </tbody>
</table>

@functions{
    async Task<List<string>> getRoles(string id)
    {
        UserManager<User> userManager = ViewBag.UserManager;
        var user = userManager.FindByIdAsync(id).Result;
        var roles = await userManager.GetRolesAsync(user);
        return roles.ToList();
    }
}

