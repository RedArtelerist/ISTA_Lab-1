@model IEnumerable<Lab1.Models.User>
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@using Lab1.Models;


<h2>List of users</h2>
<table class="table">
    @foreach (var user in Model)
    {
        <tr>
            <td>@user.Email</td>
            

            @if (User.FindFirstValue(ClaimTypes.NameIdentifier) != user.Id)
            {
                var roles = ((ClaimsIdentity)User.Identity).Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value);

                if (roles.Contains("creator"))
                {
                    <td>
                        <a class="btn btn-sm btn-primary" asp-action="Edit" asp-route-userid="@user.Id">Access rights</a>
                    </td>
                }
                if (!roles.Contains("creator") && roles.Contains("admin"))
                {
                    var rolesArray = getRoles(user);
                    if (!rolesArray.Result.Contains("creator") && !rolesArray.Result.Contains("admin"))
                    {
                        <td>
                            <a class="btn btn-sm btn-primary" asp-action="Edit" asp-route-userid="@user.Id">Access rights</a>
                        </td>
                    }
                }

            }
        </tr>
    }
</table>
<form asp-action="Index" method="post">
    <button type="submit" class="btn btn-primary">Back</button>
</form>

@functions{
    async Task<List<string>> getRoles(User user)
    {
        UserManager<User> userManager = ViewBag.UserManager;
        var roles = await userManager.GetRolesAsync(user);
        return roles.ToList();
    }
}

